#!/bin/sh -l

# Run octodns-sync with your config.

# Requirements:
#   - /github/workspace contains a clone of the user's config repository.

# If GITHUB_WORKSPACE is set, prepend it to $1 for _config_path.
echo "INFO: GITHUB_WORKSPACE is '${GITHUB_WORKSPACE}'."
_config_path="$(realpath "${GITHUB_WORKSPACE:-/}/${1:-public.yaml}")"

_doit="${2}"

# Change to config directory, so relative paths will work.
cd "$(dirname "${_config_path}")" || echo "INFO: Cannot cd to $(dirname "${_config_path}")."

# Install octodns and dependencies.
# (This should only run during docker build.)
if ! command -v octodns-sync >/dev/null 2>&1; then
  pip3 install --upgrade pip
  pip3 install -r /requirements.txt
fi

# Exit 0, if $_config_path is not readable.
# (This should only happen during docker build, or if misconfigured.)
if [ ! -r "${_config_path}" ]; then
  echo "INFO: Config '${_config_path}' is not readable. Exit 0."
  exit 0
fi

# Run octodns-sync.
_logfile="${GITHUB_WORKSPACE}/octodns-sync.log"
_planfile="${GITHUB_WORKSPACE}/octodns-sync.plan"

echo "INFO: _config_path: ${_config_path}"
if [ "${_doit}" = "--doit" ]; then
  script "${_logfile}" -e -c \
  "octodns-sync --config-file=\"${_config_path}\" --doit \
  >>\"${_planfile}\""
else
  script "${_logfile}" -e -c \
  "octodns-sync --config-file=\"${_config_path}\" \
  >>\"${_planfile}\""
fi

# If ADD_PR_COMMENT is Yes, add comment to PR.
if [ "${ADD_PR_COMMENT}" = "Yes" ]; then
  echo "INFO: \$ADD_PR_COMMENT is 'Yes'."
  if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
    if [ -z "${PR_COMMENT_TOKEN}" ]; then
      echo "FAIL: \$PR_COMMENT_TOKEN is not set."
      exit 1
    fi
  else
    echo "SKIP: \$GITHUB_EVENT_NAME is not 'pull_request'."
    exit 0
  fi
  # Construct the comment body
  _sha="$(echo "${GITHUB_SHA}" | cut -c 1-7)"
  _header="## octoDNS Plan for ${_sha}"
  _footer="Automatically generated by octodns-sync"
  _body="${_header}

$(cat "${_planfile}")

${_footer}"
  # Post the comment
  _user="fakename" \
  _token="${PR_COMMENT_TOKEN}" \
  _body="${_body}" \
  GITHUB_EVENT_PATH="${GITHUB_EVENT_PATH}" \
  python3 -c "import requests, os, json
comments_url = json.load(open(os.environ['GITHUB_EVENT_PATH'], 'r'))['pull_request']['comments_url']
response = requests.post(comments_url, auth=(os.environ['_user'], os.environ['_token']), json={'body':os.environ['_body']})
print(response)"

fi
